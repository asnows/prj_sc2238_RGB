/*
 * my_udp.c
 *
 *  Created on: 2019Äê5ÔÂ8ÈÕ
 *      Author: Administrator
 */
#include"my_udp.h"

//void udp_trans(struct udp_pcb *pcb)
//{
//	//xil_printf("udp_trans\n\r");
//	struct pbuf *p;
//	p = pbuf_alloc(PBUF_RAW,1024,PBUF_RAW);
//	p->payload = (void*)0x17000000;
//	p->len = 1024;
//	p->tot_len =1024;
//	xil_printf("p->len = %d\n\r",p ->len);
//	xil_printf("p->tot_len = %d\n\r",p->tot_len);
//	xil_printf("p->payload = %d\n\r",p->payload);
//	udp_sendto(pcb, p, (ip_addr_t *)(&pcb->remote_ip), pcb->remote_port);
////	xil_printf("p->len = %d\n\r",p ->len);
//	pbuf_free(p);
//
//}

void udp_trans( struct udp_pcb *tpcb,struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
	struct pbuf *p_buf;
	p_buf = pbuf_alloc(PBUF_RAW,1024,PBUF_RAM);

	xil_printf("p->flags= %x,  p_buf->flags= %x, \r\n",p->flags,p_buf->flags);
	xil_printf("p->ref = %x,   p_buf->ref =  %x, \r\n",p->ref,  p_buf->ref);
	xil_printf("p->type = %x,  p_buf->type = %x, \r\n",p->type, p_buf->type);

	p_buf->payload = (void*)0x17000000;
	p_buf->len = 1024;
	p_buf->tot_len =1024;
	xil_printf("p->len = %d\n\r",p_buf ->len);
	xil_printf("p->tot_len = %d\n\r",p_buf->tot_len);
	xil_printf("p = %x\n\r",p);
	xil_printf("p_buf = %x\n\r",p_buf);
	xil_printf("p->payload = %x\n\r",p_buf->payload);

	xil_printf("p->flags= %x,  p_buf->flags= %x, \r\n",p->flags,p_buf->flags);
	xil_printf("p->ref = %x,   p_buf->ref =  %x, \r\n",p->ref,  p_buf->ref);
	xil_printf("p->type = %x,  p_buf->type = %x, \r\n",p->type, p_buf->type);




	///udp_sendto(tpcb, p_buf, addr, port);
	udp_sendto(tpcb, p_buf, &tpcb->remote_ip, tpcb->remote_port);
//	xil_printf("p->len = %d\n\r",p ->len);
	pbuf_free(p_buf);


}

